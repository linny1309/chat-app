{"version":3,"sources":["firebase.js","Components/SidebarChat.js","StateProvider.js","Components/Chat.js","reducer.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","GoogleAuthProvider","SidebarChat","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Chat","actionTypes","state","action","console","log","type","user","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wXAaoBA,IAASC,cAXN,CACnBC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,wCACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,cACnBC,MAAO,2CACPC,cAAe,iBAIIC,YACVV,IAASW,OACL,IAAIX,IAASW,KAAKC,mB,OC8CpBC,IC5DFC,EAAeC,0BAEfC,EAAgB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,aAAcC,EAA1B,EAA0BA,SAA1B,OACzB,kBAACL,EAAaM,SAAd,CAAuBC,MAAQC,qBAAWL,EAASC,IAC9CC,IAIII,EAAgB,kBAAMC,qBAAWV,I,+ECiG/BW,I,QCvGFC,EACC,WAkBCT,EAfC,SAACU,EAAMC,GAEnB,OADAC,QAAQC,IAAIF,GACLA,EAAOG,MACV,KAAKL,EACD,OAAO,2BACAC,GADP,IAEIK,KAAMJ,EAAOI,OAGrB,QACI,OAAOL,ICsBJM,MA/Bf,WAAgB,IAAD,EACgBV,IADhB,wBACJS,KADI,MCGKE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAevB,aHVS,CACxBc,KAAM,MGSqCf,QAASA,GAClD,kBAAC,EAAD,QAGJyB,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.1af29e9d.chunk.js","sourcesContent":["import firebase from \"firebase\"\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDiHijU42aheyNT5devDOCm5ERnaUD7yrs\",\r\n    authDomain: \"chat-app-9cde1.firebaseapp.com\",\r\n    databaseURL: \"https://chat-app-9cde1.firebaseio.com\",\r\n    projectId: \"chat-app-9cde1\",\r\n    storageBucket: \"chat-app-9cde1.appspot.com\",\r\n    messagingSenderId: \"70267581714\",\r\n    appId: \"1:70267581714:web:266b89c23f8712e121afcb\",\r\n    measurementId: \"G-31E7N4X1TK\"\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport { auth, provider };\r\nexport default db; \r\n","import React, { useEffect, useState } from 'react'\r\nimport './SidebarChat.css'\r\nimport db from \"../firebase\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\nimport { Avatar } from \"@material-ui/core\"\r\n\r\nfunction SidebarChat({ id, name, addNewChat }) {\r\n    //React hook load code when component runs\r\n\r\n    const[seed, setSeed] = useState(\"\");\r\n    const[messages, setMessages] = useState(\"\");\r\n\r\n    //Puts in last message on the SidebarChat\r\n    useEffect(() => {\r\n        if (id) {\r\n            db.collection('rooms')\r\n            .doc(id)\r\n            .collection('messages')\r\n            .orderBy('timestamp', 'desc')\r\n            .onSnapshot(snapshot => (\r\n                setMessages(snapshot.docs.map((doc) =>\r\n                doc.data()\r\n                ))\r\n            ))\r\n        }\r\n    }, [id])\r\n\r\n    //Makes random number, for unique Avatar\r\n    useEffect(() => {\r\n        setSeed(Math.floor(Math.random() * 5000));\r\n    },[]);\r\n\r\n    //Creates new chat room\r\n    const createChat = () => {\r\n        const roomName = prompt(\"Please enter name for chat room.\");\r\n\r\n        if(roomName) {\r\n            //Database Firestore \r\n            db.collection('rooms').add({\r\n                name: roomName,\r\n            })\r\n        }\r\n    }\r\n\r\n    return !addNewChat ? (\r\n            <Link to={`/rooms/${id}`}>\r\n            <div className='sidebarChat'>\r\n                <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`} className=\"sidebarChat__avatar\"></Avatar>\r\n                <div className=\"sidebarChat__info\">\r\n                    <h2>{name}</h2>\r\n                    <p>{messages[0]?.message}</p>\r\n                </div>\r\n            </div>\r\n            </Link>\r\n            ) : (\r\n            <div onClick={createChat} className=\"sidebarChat\">\r\n                <h2>Add new chat</h2>\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default SidebarChat\r\n","import React, { createContext, useContext, useReducer } from \"react\";\r\n\r\nexport const StateContext = createContext();\r\n\r\nexport const StateProvider = ({ reducer, initialState, children}) => (\r\n    <StateContext.Provider value ={useReducer(reducer, initialState)}>\r\n        {children}\r\n    </StateContext.Provider>\r\n);\r\n\r\nexport const useStateValue = () => useContext(StateContext);","import React, { useEffect, useState } from 'react'\r\nimport './Chat.css'\r\n\r\nimport { Avatar, IconButton } from \"@material-ui/core\"\r\nimport { useParams } from \"react-router-dom\"\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert'\r\nimport SearchIcon from '@material-ui/icons/SearchOutlined'\r\nimport AttachIcon from '@material-ui/icons/AttachFile'\r\nimport InsertEmojiIcon from '@material-ui/icons/InsertEmoticon'\r\nimport MicIcon from '@material-ui/icons/Mic'\r\nimport db from '../firebase'\r\nimport { useStateValue } from '../StateProvider'\r\nimport firebase from \"firebase\"\r\n\r\nfunction Chat() {\r\n    const[input, setInput] = useState(\"\");\r\n    const[seed, setSeed] = useState(\"\");\r\n    const { roomId } = useParams();\r\n    const [roomName, setRoomName] = useState(\"\");\r\n    const [messages, setMessage] = useState([]);\r\n    const [{ user }, dispath] = useStateValue();\r\n\r\n    useEffect(() => {\r\n        if(roomId) {\r\n            db.collection('rooms').doc(roomId).onSnapshot(snapshot => (\r\n                setRoomName(snapshot.data().name))\r\n            )\r\n            db\r\n                .collection('rooms')\r\n                .doc(roomId).collection('messages')\r\n                .orderBy('timestamp', 'asc')\r\n                .onSnapshot(snapshot => (\r\n                    setMessage(snapshot.docs.map(doc => doc.data()))\r\n                ))\r\n        }\r\n    }, [roomId]);\r\n\r\n    useEffect(() => {\r\n        setSeed(Math.floor(Math.random() * 5000));\r\n    },[]);\r\n\r\n    //Send message function\r\n    const sendMessage = (e) => {\r\n        e.preventDefault();\r\n        console.log('You typed: ' + input);\r\n        db.collection('rooms').doc(roomId).collection('messages').add({\r\n            message: input,\r\n            name: user.displayName,\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp()\r\n        });\r\n        setInput(\"\");\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat\">\r\n            <div className=\"chat__header\">\r\n                <Avatar src={`https://avatars.dicebear.com/api/human/${Math.floor(Math.random() * 5000)}.svg`} className=\"sidebarChat__avatar\"></Avatar>\r\n\r\n                <div className=\"chat__headerInfo\">\r\n                    <h3>{roomName}</h3>\r\n                    <p>Last seen{\" \"}{\r\n                        new Date(\r\n                            messages[messages.length - 1]?.\r\n                            timestamp?.toDate()\r\n                        ).toUTCString()}\r\n                    </p>\r\n                </div>\r\n\r\n                <div className=\"chat__chatHeaderRight\">\r\n                    <IconButton>\r\n                        <SearchIcon />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <AttachIcon />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <MoreVertIcon />\r\n                    </IconButton>\r\n                </div>\r\n            </div> \r\n\r\n            <div className=\"chat__body\">\r\n                {messages.map(message => (\r\n                <p className={`chat__message ${message.name === user.displayName && \"chat__reciever\"}`}>\r\n                    <span className=\"chat__name\">\r\n                        {message.name}\r\n                    </span> \r\n                        {message.message}\r\n                    <p className=\"chat__timestamp\">\r\n                        {new Date(message.timestamp?.toDate()).toUTCString()}\r\n                    </p>\r\n                </p>\r\n                ))}\r\n            </div>\r\n\r\n            <div className=\"chat__footer\">\r\n                <InsertEmojiIcon className=\"material-icon-m chat__footerIcon\"/>\r\n                <form>\r\n                    <input value={input} onChange={(e) => setInput(e.target.value)} placeholder=\"Send a message\" type=\"text\"/>\r\n                    <button onClick={sendMessage} type=\"submit\">Send a message</button>\r\n                </form>\r\n                <MicIcon className=\"material-icon-m chat__footerIcon\"/>\r\n            </div>                \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","export const initialState = {\r\n    user: null,\r\n};\r\n\r\nexport const actionTypes = {\r\n    SET_USER: \"SET_USER\",\r\n};\r\n\r\nconst reducer = (state,action) => {\r\n    console.log(action);\r\n    switch(action.type) {\r\n        case actionTypes.SET_USER:\r\n            return {\r\n                ...state,\r\n                user: action.user,\r\n            };\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};\r\n\r\nexport default reducer;","import React, { useState } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route} from \"react-router-dom\"\n\nimport Sidebar from \"./Components/Sidebar\"\nimport Chat from \"./Components/Chat\"\nimport Login from \"./Components/Login\"\nimport { useStateValue } from\"./StateProvider\"\n\nfunction App() {\n  const [{ user }, dispatch] = useStateValue();\n\n  return ( \n  // BEM naming convention\n  <div className=\"app\">\n\n    {!user? (\n      <Login />\n    ) : (\n\n    <div className=\"app__body\">\n      <Router>\n      <Sidebar />\n        <Switch>\n\n          <Route path=\"/rooms/:roomId\">\n            <Chat />\n          </Route>\n\n          <Route path=\"/\">\n          </Route>\n\n        </Switch>\n      </Router>\n    </div>\n    )}\n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer, { initialState } from \"./reducer\";\nimport { StateProvider } from \"./StateProvider\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState={initialState} reducer={reducer}>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}